{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PureSingleDatePicker = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _reactWithStyles = require('react-with-styles');\n\nvar _reactPortal = require('react-portal');\n\nvar _airbnbPropTypes = require('airbnb-prop-types');\n\nvar _consolidatedEvents = require('consolidated-events');\n\nvar _isTouchDevice = require('is-touch-device');\n\nvar _isTouchDevice2 = _interopRequireDefault(_isTouchDevice);\n\nvar _reactOutsideClickHandler = require('react-outside-click-handler');\n\nvar _reactOutsideClickHandler2 = _interopRequireDefault(_reactOutsideClickHandler);\n\nvar _SingleDatePickerShape = require('../shapes/SingleDatePickerShape');\n\nvar _SingleDatePickerShape2 = _interopRequireDefault(_SingleDatePickerShape);\n\nvar _defaultPhrases = require('../defaultPhrases');\n\nvar _toMomentObject = require('../utils/toMomentObject');\n\nvar _toMomentObject2 = _interopRequireDefault(_toMomentObject);\n\nvar _toLocalizedDateString = require('../utils/toLocalizedDateString');\n\nvar _toLocalizedDateString2 = _interopRequireDefault(_toLocalizedDateString);\n\nvar _getResponsiveContainerStyles = require('../utils/getResponsiveContainerStyles');\n\nvar _getResponsiveContainerStyles2 = _interopRequireDefault(_getResponsiveContainerStyles);\n\nvar _getDetachedContainerStyles = require('../utils/getDetachedContainerStyles');\n\nvar _getDetachedContainerStyles2 = _interopRequireDefault(_getDetachedContainerStyles);\n\nvar _getInputHeight = require('../utils/getInputHeight');\n\nvar _getInputHeight2 = _interopRequireDefault(_getInputHeight);\n\nvar _isInclusivelyAfterDay = require('../utils/isInclusivelyAfterDay');\n\nvar _isInclusivelyAfterDay2 = _interopRequireDefault(_isInclusivelyAfterDay);\n\nvar _disableScroll2 = require('../utils/disableScroll');\n\nvar _disableScroll3 = _interopRequireDefault(_disableScroll2);\n\nvar _SingleDatePickerInput = require('./SingleDatePickerInput');\n\nvar _SingleDatePickerInput2 = _interopRequireDefault(_SingleDatePickerInput);\n\nvar _DayPickerSingleDateController = require('./DayPickerSingleDateController');\n\nvar _DayPickerSingleDateController2 = _interopRequireDefault(_DayPickerSingleDateController);\n\nvar _CloseButton = require('./CloseButton');\n\nvar _CloseButton2 = _interopRequireDefault(_CloseButton);\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar propTypes = (0, _airbnbPropTypes.forbidExtraProps)((0, _object2['default'])({}, _reactWithStyles.withStylesPropTypes, _SingleDatePickerShape2['default']));\nvar defaultProps = {\n  // required props for a functional interactive SingleDatePicker\n  date: null,\n  focused: false,\n  // input related props\n  id: 'date',\n  placeholder: 'Date',\n  disabled: false,\n  required: false,\n  readOnly: false,\n  screenReaderInputMessage: '',\n  showClearDate: false,\n  showDefaultInputIcon: false,\n  inputIconPosition: _constants.ICON_BEFORE_POSITION,\n  customInputIcon: null,\n  customCloseIcon: null,\n  noBorder: false,\n  block: false,\n  small: false,\n  regular: false,\n  verticalSpacing: _constants.DEFAULT_VERTICAL_SPACING,\n  keepFocusOnInput: false,\n  // calendar presentation and interaction related props\n  orientation: _constants.HORIZONTAL_ORIENTATION,\n  anchorDirection: _constants.ANCHOR_LEFT,\n  openDirection: _constants.OPEN_DOWN,\n  horizontalMargin: 0,\n  withPortal: false,\n  withFullScreenPortal: false,\n  appendToBody: false,\n  disableScroll: false,\n  initialVisibleMonth: null,\n  firstDayOfWeek: null,\n  numberOfMonths: 2,\n  keepOpenOnDateSelect: false,\n  reopenPickerOnClearDate: false,\n  renderCalendarInfo: null,\n  calendarInfoPosition: _constants.INFO_POSITION_BOTTOM,\n  hideKeyboardShortcutsPanel: false,\n  daySize: _constants.DAY_SIZE,\n  isRTL: false,\n  verticalHeight: null,\n  transitionDuration: undefined,\n  horizontalMonthPadding: 13,\n  // navigation related props\n  navPrev: null,\n  navNext: null,\n  onPrevMonthClick: function () {\n    function onPrevMonthClick() {}\n\n    return onPrevMonthClick;\n  }(),\n  onNextMonthClick: function () {\n    function onNextMonthClick() {}\n\n    return onNextMonthClick;\n  }(),\n  onClose: function () {\n    function onClose() {}\n\n    return onClose;\n  }(),\n  // month presentation and interaction related props\n  renderMonthText: null,\n  // day presentation and interaction related props\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  renderMonthElement: null,\n  enableOutsideDays: false,\n  isDayBlocked: function () {\n    function isDayBlocked() {\n      return false;\n    }\n\n    return isDayBlocked;\n  }(),\n  isOutsideRange: function () {\n    function isOutsideRange(day) {\n      return !(0, _isInclusivelyAfterDay2['default'])(day, (0, _moment2['default'])());\n    }\n\n    return isOutsideRange;\n  }(),\n  isDayHighlighted: function () {\n    function isDayHighlighted() {}\n\n    return isDayHighlighted;\n  }(),\n  // internationalization props\n  displayFormat: function () {\n    function displayFormat() {\n      return _moment2['default'].localeData().longDateFormat('L');\n    }\n\n    return displayFormat;\n  }(),\n  monthFormat: 'MMMM YYYY',\n  weekDayFormat: 'dd',\n  phrases: _defaultPhrases.SingleDatePickerPhrases,\n  dayAriaLabelFormat: undefined\n};\n\nvar SingleDatePicker = function (_React$Component) {\n  _inherits(SingleDatePicker, _React$Component);\n\n  function SingleDatePicker(props) {\n    _classCallCheck(this, SingleDatePicker);\n\n    var _this = _possibleConstructorReturn(this, (SingleDatePicker.__proto__ || Object.getPrototypeOf(SingleDatePicker)).call(this, props));\n\n    _this.isTouchDevice = false;\n    _this.state = {\n      dayPickerContainerStyles: {},\n      isDayPickerFocused: false,\n      isInputFocused: false,\n      showKeyboardShortcuts: false\n    };\n    _this.onDayPickerFocus = _this.onDayPickerFocus.bind(_this);\n    _this.onDayPickerBlur = _this.onDayPickerBlur.bind(_this);\n    _this.showKeyboardShortcutsPanel = _this.showKeyboardShortcutsPanel.bind(_this);\n    _this.onChange = _this.onChange.bind(_this);\n    _this.onFocus = _this.onFocus.bind(_this);\n    _this.onClearFocus = _this.onClearFocus.bind(_this);\n    _this.clearDate = _this.clearDate.bind(_this);\n    _this.responsivizePickerPosition = _this.responsivizePickerPosition.bind(_this);\n    _this.disableScroll = _this.disableScroll.bind(_this);\n    _this.setDayPickerContainerRef = _this.setDayPickerContainerRef.bind(_this);\n    _this.setContainerRef = _this.setContainerRef.bind(_this);\n    return _this;\n  }\n  /* istanbul ignore next */\n\n\n  _createClass(SingleDatePicker, [{\n    key: 'componentDidMount',\n    value: function () {\n      function componentDidMount() {\n        this.removeEventListener = (0, _consolidatedEvents.addEventListener)(window, 'resize', this.responsivizePickerPosition, {\n          passive: true\n        });\n        this.responsivizePickerPosition();\n        this.disableScroll();\n        var focused = this.props.focused;\n\n        if (focused) {\n          this.setState({\n            isInputFocused: true\n          });\n        }\n\n        this.isTouchDevice = (0, _isTouchDevice2['default'])();\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: 'componentDidUpdate',\n    value: function () {\n      function componentDidUpdate(prevProps) {\n        var focused = this.props.focused;\n\n        if (!prevProps.focused && focused) {\n          this.responsivizePickerPosition();\n          this.disableScroll();\n        } else if (prevProps.focused && !focused) {\n          if (this.enableScroll) this.enableScroll();\n        }\n      }\n\n      return componentDidUpdate;\n    }()\n    /* istanbul ignore next */\n\n  }, {\n    key: 'componentWillUnmount',\n    value: function () {\n      function componentWillUnmount() {\n        if (this.removeEventListener) this.removeEventListener();\n        if (this.enableScroll) this.enableScroll();\n      }\n\n      return componentWillUnmount;\n    }()\n  }, {\n    key: 'onChange',\n    value: function () {\n      function onChange(dateString) {\n        var _props = this.props,\n            isOutsideRange = _props.isOutsideRange,\n            keepOpenOnDateSelect = _props.keepOpenOnDateSelect,\n            onDateChange = _props.onDateChange,\n            onFocusChange = _props.onFocusChange,\n            onClose = _props.onClose;\n        var newDate = (0, _toMomentObject2['default'])(dateString, this.getDisplayFormat());\n        var isValid = newDate && !isOutsideRange(newDate);\n\n        if (isValid) {\n          onDateChange(newDate);\n\n          if (!keepOpenOnDateSelect) {\n            onFocusChange({\n              focused: false\n            });\n            onClose({\n              date: newDate\n            });\n          }\n        } else {\n          onDateChange(null);\n        }\n      }\n\n      return onChange;\n    }()\n  }, {\n    key: 'onFocus',\n    value: function () {\n      function onFocus() {\n        var _props2 = this.props,\n            disabled = _props2.disabled,\n            onFocusChange = _props2.onFocusChange,\n            readOnly = _props2.readOnly,\n            withPortal = _props2.withPortal,\n            withFullScreenPortal = _props2.withFullScreenPortal,\n            keepFocusOnInput = _props2.keepFocusOnInput;\n        var withAnyPortal = withPortal || withFullScreenPortal;\n        var moveFocusToDayPicker = withAnyPortal || readOnly && !keepFocusOnInput || this.isTouchDevice && !keepFocusOnInput;\n\n        if (moveFocusToDayPicker) {\n          this.onDayPickerFocus();\n        } else {\n          this.onDayPickerBlur();\n        }\n\n        if (!disabled) {\n          onFocusChange({\n            focused: true\n          });\n        }\n      }\n\n      return onFocus;\n    }()\n  }, {\n    key: 'onClearFocus',\n    value: function () {\n      function onClearFocus(event) {\n        var _props3 = this.props,\n            date = _props3.date,\n            focused = _props3.focused,\n            onFocusChange = _props3.onFocusChange,\n            onClose = _props3.onClose,\n            appendToBody = _props3.appendToBody;\n        if (!focused) return;\n        if (appendToBody && this.dayPickerContainer.contains(event.target)) return;\n        this.setState({\n          isInputFocused: false,\n          isDayPickerFocused: false\n        });\n        onFocusChange({\n          focused: false\n        });\n        onClose({\n          date: date\n        });\n      }\n\n      return onClearFocus;\n    }()\n  }, {\n    key: 'onDayPickerFocus',\n    value: function () {\n      function onDayPickerFocus() {\n        this.setState({\n          isInputFocused: false,\n          isDayPickerFocused: true,\n          showKeyboardShortcuts: false\n        });\n      }\n\n      return onDayPickerFocus;\n    }()\n  }, {\n    key: 'onDayPickerBlur',\n    value: function () {\n      function onDayPickerBlur() {\n        this.setState({\n          isInputFocused: true,\n          isDayPickerFocused: false,\n          showKeyboardShortcuts: false\n        });\n      }\n\n      return onDayPickerBlur;\n    }()\n  }, {\n    key: 'getDateString',\n    value: function () {\n      function getDateString(date) {\n        var displayFormat = this.getDisplayFormat();\n\n        if (date && displayFormat) {\n          return date && date.format(displayFormat);\n        }\n\n        return (0, _toLocalizedDateString2['default'])(date);\n      }\n\n      return getDateString;\n    }()\n  }, {\n    key: 'getDisplayFormat',\n    value: function () {\n      function getDisplayFormat() {\n        var displayFormat = this.props.displayFormat;\n        return typeof displayFormat === 'string' ? displayFormat : displayFormat();\n      }\n\n      return getDisplayFormat;\n    }()\n  }, {\n    key: 'setDayPickerContainerRef',\n    value: function () {\n      function setDayPickerContainerRef(ref) {\n        this.dayPickerContainer = ref;\n      }\n\n      return setDayPickerContainerRef;\n    }()\n  }, {\n    key: 'setContainerRef',\n    value: function () {\n      function setContainerRef(ref) {\n        this.container = ref;\n      }\n\n      return setContainerRef;\n    }()\n  }, {\n    key: 'clearDate',\n    value: function () {\n      function clearDate() {\n        var _props4 = this.props,\n            onDateChange = _props4.onDateChange,\n            reopenPickerOnClearDate = _props4.reopenPickerOnClearDate,\n            onFocusChange = _props4.onFocusChange;\n        onDateChange(null);\n\n        if (reopenPickerOnClearDate) {\n          onFocusChange({\n            focused: true\n          });\n        }\n      }\n\n      return clearDate;\n    }()\n  }, {\n    key: 'disableScroll',\n    value: function () {\n      function disableScroll() {\n        var _props5 = this.props,\n            appendToBody = _props5.appendToBody,\n            propDisableScroll = _props5.disableScroll,\n            focused = _props5.focused;\n        if (!appendToBody && !propDisableScroll) return;\n        if (!focused) return; // Disable scroll for every ancestor of this <SingleDatePicker> up to the\n        // document level. This ensures the input and the picker never move. Other\n        // sibling elements or the picker itself can scroll.\n\n        this.enableScroll = (0, _disableScroll3['default'])(this.container);\n      }\n\n      return disableScroll;\n    }()\n    /* istanbul ignore next */\n\n  }, {\n    key: 'responsivizePickerPosition',\n    value: function () {\n      function responsivizePickerPosition() {\n        // It's possible the portal props have been changed in response to window resizes\n        // So let's ensure we reset this back to the base state each time\n        this.setState({\n          dayPickerContainerStyles: {}\n        });\n        var _props6 = this.props,\n            openDirection = _props6.openDirection,\n            anchorDirection = _props6.anchorDirection,\n            horizontalMargin = _props6.horizontalMargin,\n            withPortal = _props6.withPortal,\n            withFullScreenPortal = _props6.withFullScreenPortal,\n            appendToBody = _props6.appendToBody,\n            focused = _props6.focused;\n        var dayPickerContainerStyles = this.state.dayPickerContainerStyles;\n\n        if (!focused) {\n          return;\n        }\n\n        var isAnchoredLeft = anchorDirection === _constants.ANCHOR_LEFT;\n\n        if (!withPortal && !withFullScreenPortal) {\n          var containerRect = this.dayPickerContainer.getBoundingClientRect();\n          var currentOffset = dayPickerContainerStyles[anchorDirection] || 0;\n          var containerEdge = isAnchoredLeft ? containerRect[_constants.ANCHOR_RIGHT] : containerRect[_constants.ANCHOR_LEFT];\n          this.setState({\n            dayPickerContainerStyles: (0, _object2['default'])({}, (0, _getResponsiveContainerStyles2['default'])(anchorDirection, currentOffset, containerEdge, horizontalMargin), appendToBody && (0, _getDetachedContainerStyles2['default'])(openDirection, anchorDirection, this.container))\n          });\n        }\n      }\n\n      return responsivizePickerPosition;\n    }()\n  }, {\n    key: 'showKeyboardShortcutsPanel',\n    value: function () {\n      function showKeyboardShortcutsPanel() {\n        this.setState({\n          isInputFocused: false,\n          isDayPickerFocused: true,\n          showKeyboardShortcuts: true\n        });\n      }\n\n      return showKeyboardShortcutsPanel;\n    }()\n  }, {\n    key: 'maybeRenderDayPickerWithPortal',\n    value: function () {\n      function maybeRenderDayPickerWithPortal() {\n        var _props7 = this.props,\n            focused = _props7.focused,\n            withPortal = _props7.withPortal,\n            withFullScreenPortal = _props7.withFullScreenPortal,\n            appendToBody = _props7.appendToBody;\n\n        if (!focused) {\n          return null;\n        }\n\n        if (withPortal || withFullScreenPortal || appendToBody) {\n          return _react2['default'].createElement(_reactPortal.Portal, null, this.renderDayPicker());\n        }\n\n        return this.renderDayPicker();\n      }\n\n      return maybeRenderDayPickerWithPortal;\n    }()\n  }, {\n    key: 'renderDayPicker',\n    value: function () {\n      function renderDayPicker() {\n        var _props8 = this.props,\n            anchorDirection = _props8.anchorDirection,\n            openDirection = _props8.openDirection,\n            onDateChange = _props8.onDateChange,\n            date = _props8.date,\n            onFocusChange = _props8.onFocusChange,\n            focused = _props8.focused,\n            enableOutsideDays = _props8.enableOutsideDays,\n            numberOfMonths = _props8.numberOfMonths,\n            orientation = _props8.orientation,\n            monthFormat = _props8.monthFormat,\n            navPrev = _props8.navPrev,\n            navNext = _props8.navNext,\n            onPrevMonthClick = _props8.onPrevMonthClick,\n            onNextMonthClick = _props8.onNextMonthClick,\n            onClose = _props8.onClose,\n            withPortal = _props8.withPortal,\n            withFullScreenPortal = _props8.withFullScreenPortal,\n            keepOpenOnDateSelect = _props8.keepOpenOnDateSelect,\n            initialVisibleMonth = _props8.initialVisibleMonth,\n            renderMonthText = _props8.renderMonthText,\n            renderCalendarDay = _props8.renderCalendarDay,\n            renderDayContents = _props8.renderDayContents,\n            renderCalendarInfo = _props8.renderCalendarInfo,\n            renderMonthElement = _props8.renderMonthElement,\n            calendarInfoPosition = _props8.calendarInfoPosition,\n            hideKeyboardShortcutsPanel = _props8.hideKeyboardShortcutsPanel,\n            firstDayOfWeek = _props8.firstDayOfWeek,\n            customCloseIcon = _props8.customCloseIcon,\n            phrases = _props8.phrases,\n            dayAriaLabelFormat = _props8.dayAriaLabelFormat,\n            daySize = _props8.daySize,\n            isRTL = _props8.isRTL,\n            isOutsideRange = _props8.isOutsideRange,\n            isDayBlocked = _props8.isDayBlocked,\n            isDayHighlighted = _props8.isDayHighlighted,\n            weekDayFormat = _props8.weekDayFormat,\n            styles = _props8.styles,\n            verticalHeight = _props8.verticalHeight,\n            transitionDuration = _props8.transitionDuration,\n            verticalSpacing = _props8.verticalSpacing,\n            horizontalMonthPadding = _props8.horizontalMonthPadding,\n            small = _props8.small,\n            reactDates = _props8.theme.reactDates;\n        var _state = this.state,\n            dayPickerContainerStyles = _state.dayPickerContainerStyles,\n            isDayPickerFocused = _state.isDayPickerFocused,\n            showKeyboardShortcuts = _state.showKeyboardShortcuts;\n        var onOutsideClick = !withFullScreenPortal && withPortal ? this.onClearFocus : undefined;\n\n        var closeIcon = customCloseIcon || _react2['default'].createElement(_CloseButton2['default'], null);\n\n        var inputHeight = (0, _getInputHeight2['default'])(reactDates, small);\n        var withAnyPortal = withPortal || withFullScreenPortal;\n        return _react2['default'].createElement('div', _extends({\n          // eslint-disable-line jsx-a11y/no-static-element-interactions\n          ref: this.setDayPickerContainerRef\n        }, (0, _reactWithStyles.css)(styles.SingleDatePicker_picker, anchorDirection === _constants.ANCHOR_LEFT && styles.SingleDatePicker_picker__directionLeft, anchorDirection === _constants.ANCHOR_RIGHT && styles.SingleDatePicker_picker__directionRight, openDirection === _constants.OPEN_DOWN && styles.SingleDatePicker_picker__openDown, openDirection === _constants.OPEN_UP && styles.SingleDatePicker_picker__openUp, !withAnyPortal && openDirection === _constants.OPEN_DOWN && {\n          top: inputHeight + verticalSpacing\n        }, !withAnyPortal && openDirection === _constants.OPEN_UP && {\n          bottom: inputHeight + verticalSpacing\n        }, orientation === _constants.HORIZONTAL_ORIENTATION && styles.SingleDatePicker_picker__horizontal, orientation === _constants.VERTICAL_ORIENTATION && styles.SingleDatePicker_picker__vertical, withAnyPortal && styles.SingleDatePicker_picker__portal, withFullScreenPortal && styles.SingleDatePicker_picker__fullScreenPortal, isRTL && styles.SingleDatePicker_picker__rtl, dayPickerContainerStyles), {\n          onClick: onOutsideClick\n        }), _react2['default'].createElement(_DayPickerSingleDateController2['default'], {\n          date: date,\n          onDateChange: onDateChange,\n          onFocusChange: onFocusChange,\n          orientation: orientation,\n          enableOutsideDays: enableOutsideDays,\n          numberOfMonths: numberOfMonths,\n          monthFormat: monthFormat,\n          withPortal: withAnyPortal,\n          focused: focused,\n          keepOpenOnDateSelect: keepOpenOnDateSelect,\n          hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,\n          initialVisibleMonth: initialVisibleMonth,\n          navPrev: navPrev,\n          navNext: navNext,\n          onPrevMonthClick: onPrevMonthClick,\n          onNextMonthClick: onNextMonthClick,\n          onClose: onClose,\n          renderMonthText: renderMonthText,\n          renderCalendarDay: renderCalendarDay,\n          renderDayContents: renderDayContents,\n          renderCalendarInfo: renderCalendarInfo,\n          renderMonthElement: renderMonthElement,\n          calendarInfoPosition: calendarInfoPosition,\n          isFocused: isDayPickerFocused,\n          showKeyboardShortcuts: showKeyboardShortcuts,\n          onBlur: this.onDayPickerBlur,\n          phrases: phrases,\n          dayAriaLabelFormat: dayAriaLabelFormat,\n          daySize: daySize,\n          isRTL: isRTL,\n          isOutsideRange: isOutsideRange,\n          isDayBlocked: isDayBlocked,\n          isDayHighlighted: isDayHighlighted,\n          firstDayOfWeek: firstDayOfWeek,\n          weekDayFormat: weekDayFormat,\n          verticalHeight: verticalHeight,\n          transitionDuration: transitionDuration,\n          horizontalMonthPadding: horizontalMonthPadding\n        }), withFullScreenPortal && _react2['default'].createElement('button', _extends({}, (0, _reactWithStyles.css)(styles.SingleDatePicker_closeButton), {\n          'aria-label': phrases.closeDatePicker,\n          type: 'button',\n          onClick: this.onClearFocus\n        }), _react2['default'].createElement('div', (0, _reactWithStyles.css)(styles.SingleDatePicker_closeButton_svg), closeIcon)));\n      }\n\n      return renderDayPicker;\n    }()\n  }, {\n    key: 'render',\n    value: function () {\n      function render() {\n        var _props9 = this.props,\n            id = _props9.id,\n            placeholder = _props9.placeholder,\n            disabled = _props9.disabled,\n            focused = _props9.focused,\n            required = _props9.required,\n            readOnly = _props9.readOnly,\n            openDirection = _props9.openDirection,\n            showClearDate = _props9.showClearDate,\n            showDefaultInputIcon = _props9.showDefaultInputIcon,\n            inputIconPosition = _props9.inputIconPosition,\n            customCloseIcon = _props9.customCloseIcon,\n            customInputIcon = _props9.customInputIcon,\n            date = _props9.date,\n            phrases = _props9.phrases,\n            withPortal = _props9.withPortal,\n            withFullScreenPortal = _props9.withFullScreenPortal,\n            screenReaderInputMessage = _props9.screenReaderInputMessage,\n            isRTL = _props9.isRTL,\n            noBorder = _props9.noBorder,\n            block = _props9.block,\n            small = _props9.small,\n            regular = _props9.regular,\n            verticalSpacing = _props9.verticalSpacing,\n            styles = _props9.styles;\n        var isInputFocused = this.state.isInputFocused;\n        var displayValue = this.getDateString(date);\n        var enableOutsideClick = !withPortal && !withFullScreenPortal;\n        var hideFang = verticalSpacing < _constants.FANG_HEIGHT_PX;\n\n        var input = _react2['default'].createElement(_SingleDatePickerInput2['default'], {\n          id: id,\n          placeholder: placeholder,\n          focused: focused,\n          isFocused: isInputFocused,\n          disabled: disabled,\n          required: required,\n          readOnly: readOnly,\n          openDirection: openDirection,\n          showCaret: !withPortal && !withFullScreenPortal && !hideFang,\n          onClearDate: this.clearDate,\n          showClearDate: showClearDate,\n          showDefaultInputIcon: showDefaultInputIcon,\n          inputIconPosition: inputIconPosition,\n          customCloseIcon: customCloseIcon,\n          customInputIcon: customInputIcon,\n          displayValue: displayValue,\n          onChange: this.onChange,\n          onFocus: this.onFocus,\n          onKeyDownShiftTab: this.onClearFocus,\n          onKeyDownTab: this.onClearFocus,\n          onKeyDownArrowDown: this.onDayPickerFocus,\n          onKeyDownQuestionMark: this.showKeyboardShortcutsPanel,\n          screenReaderMessage: screenReaderInputMessage,\n          phrases: phrases,\n          isRTL: isRTL,\n          noBorder: noBorder,\n          block: block,\n          small: small,\n          regular: regular,\n          verticalSpacing: verticalSpacing\n        });\n\n        return _react2['default'].createElement('div', _extends({\n          ref: this.setContainerRef\n        }, (0, _reactWithStyles.css)(styles.SingleDatePicker, block && styles.SingleDatePicker__block)), enableOutsideClick && _react2['default'].createElement(_reactOutsideClickHandler2['default'], {\n          onOutsideClick: this.onClearFocus\n        }, input, this.maybeRenderDayPickerWithPortal()), !enableOutsideClick && input, !enableOutsideClick && this.maybeRenderDayPickerWithPortal());\n      }\n\n      return render;\n    }()\n  }]);\n\n  return SingleDatePicker;\n}(_react2['default'].Component);\n\nSingleDatePicker.propTypes = propTypes;\nSingleDatePicker.defaultProps = defaultProps;\nexports.PureSingleDatePicker = SingleDatePicker;\nexports['default'] = (0, _reactWithStyles.withStyles)(function (_ref) {\n  var _ref$reactDates = _ref.reactDates,\n      color = _ref$reactDates.color,\n      zIndex = _ref$reactDates.zIndex;\n  return {\n    SingleDatePicker: {\n      position: 'relative',\n      display: 'inline-block'\n    },\n    SingleDatePicker__block: {\n      display: 'block'\n    },\n    SingleDatePicker_picker: {\n      zIndex: zIndex + 1,\n      backgroundColor: color.background,\n      position: 'absolute'\n    },\n    SingleDatePicker_picker__rtl: {\n      direction: 'rtl'\n    },\n    SingleDatePicker_picker__directionLeft: {\n      left: 0\n    },\n    SingleDatePicker_picker__directionRight: {\n      right: 0\n    },\n    SingleDatePicker_picker__portal: {\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      height: '100%',\n      width: '100%'\n    },\n    SingleDatePicker_picker__fullScreenPortal: {\n      backgroundColor: color.background\n    },\n    SingleDatePicker_closeButton: {\n      background: 'none',\n      border: 0,\n      color: 'inherit',\n      font: 'inherit',\n      lineHeight: 'normal',\n      overflow: 'visible',\n      cursor: 'pointer',\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      padding: 15,\n      zIndex: zIndex + 2,\n      ':hover': {\n        color: 'darken(' + String(color.core.grayLighter) + ', 10%)',\n        textDecoration: 'none'\n      },\n      ':focus': {\n        color: 'darken(' + String(color.core.grayLighter) + ', 10%)',\n        textDecoration: 'none'\n      }\n    },\n    SingleDatePicker_closeButton_svg: {\n      height: 15,\n      width: 15,\n      fill: color.core.grayLighter\n    }\n  };\n})(SingleDatePicker);","map":null,"metadata":{},"sourceType":"script"}